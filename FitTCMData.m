% Syntax:       finalValues = FitTCMData(<inputs>)
%
% Description:  This script is adapted from the sequence of files used to fit
%               data generated by the TCM to extract thermal properties of the
%               sample material. The author of these original files is Dave
%               Hurley (david.hurley@inl.gov):
%                   parmerror2.m
%                   loaddata.m
%                   TWM.m
%
%               The purpose is to develop a computational method, using 2D
%               Fourier transforms, that will perform a minimization on the data
%               for an isotropic or anisotropic material.
%
%               The data are taken from a sequence of '.mat' files generated by
%               the script that runs the TCM. If generated properly , each file
%               will contain an array 'frequencies' listing all the frequencies
%               used during the data-generating test. Each file must also
%               contain the following data fields for its respecive laser pump
%               frequency:
%                   Name    Description
%                   AxPos   Axial position of the pump w.r.t. the probe
%                   mag     Magnitude of the signal measured by the probe
%                   phs     Phase of the signal measured w.r.t. the source
%
% Inputs:
%   * Indicates a key-value argument
%               1) Name of substrate material, as it appears in Database.m
%               2) Name of film material, as it appears in Database.m
%               3) Film thickness, in m
%               4) Directory containing the data files; all data files must
%                  reside within this directory
%               5) Base data file name, i.e. the part of the file name that all
%                  the data files share. For example, a test containing three
%                  freequencies may result in a set of files named:
%                      Sample9All1.mat Sample9A1.mat Sample9M1.mat Sample9P1.mat
%                      Sample9All2.mat Sample9A2.mat Sample9M2.mat Sample9P2.mat
%                      Sample9All3.mat Sample9A3.mat Sample9M3.mat Sample9P3.mat
%                  in this scenario the base file name would be 'Sample9'. This
%                  code only uses the 'All'-type files, as they contain all the
%                  data from the 'A', 'M', and 'P'-type files.
%               * AnisotropicFileBase
%                   Anisotropic data file name base; results in an anisotropic
%                   analysis using the data from this file as scan data in the
%                   second direction. Available only if ParameterMode is set to
%                   '1' or '2', and causes 'ks2D' and 'Ds2D' to be included in
%                   the outputs.
%               * DataMode              (default = 1)
%                   Specifies which data will be included in the minimization
%                   1 = theta & amplitude
%                   2 = theta
%               * Magnification         (default = 50)
%                   Provides the magnification of the objective lens used
%               * ParameterMode         (default = 1)
%                   Specifies which parameters should be minimized and included
%                   in the outputs:
%                       1 = ks, ds, Re, Rth
%                       2 = ks, ds, Re
%                       3 = kf, df, Re, Rth
%                   Note that using a value of '2' will result in the
%                   utilization of one less frequency than is provided in the
%                   data files
% Outputs:      finalValues structure containing the following fields, depending
%               on the input arguments and requested analysis modes:
%               ks:     thermal conductivity of the substrate
%               ds:     thermal diffusivity of the substrate
%               rth:    thermal (Kapitza) resistance at the film-substrate
%                       interface
%               spot:   convolved spotsize of the pump and probe lasers
%               kf:     thermal conductivity of the film
%               df      thermal diffusivity of the film
%               ks2D:   anisotropic thermal conductivity of the substrate in the
%                       second direction
%               ds2D:   anisotropic thermal diffusivity of the substrate in the
%                       second direction
%
% File:         FitThermalAnisotropy.m
% Author:       Brycen Wendt (brycen.wendt@inl.gov; wendbryc@isu.edu)
% Date Created: 09/30/2015

function finalValues = FitTCMData(substrate, film, filmThickness, directory, scanFileBase, varargin)
  % Get the databases and utilities
  database = Database();
  utilities = Utilities();

  % Define the input arguments
  parser = inputParser;
  parser.addRequired('substrate', @ischar);
  parser.addRequired('film', @ischar);
  parser.addRequired('filmThickness', @isnumeric);
  parser.addRequired('directory', @ischar);
  parser.addRequired('scanFileBase', @ischar);
  parser.addParameter('anisotropicFileBase', '', @ischar);
  parser.addParameter('dataMode', 1, @(x) x == 1 || x == 2);
  parser.addParameter('magnification', 50, @isnumeric);
  parser.addParameter('parameterMode', 1, @(x) x >= 1 && x <= 3);

  % Check the input arguments
  parser.KeepUnmatched = true;
  try
    parser.parse(substrate, film, filmThickness, directory, scanFileBase, varargin{:});
  catch me
    error('Error when trying to parse input arguments:   %s', me.message);
  end
  if ~isempty(fieldnames(parser.Unmatched))
    warning('MATLAB:unknownArgument', 'Some arguments were not recognized:');
    disp(parser.Unmatched);
  end

  % Assign additional values
  anisotropicFileBase = parser.Results.anisotropicFileBase;
  runAnisotropicAnalysis = false;
  dataMode = parser.Results.dataMode;
  numberOfFrequencies = 0;
  magnification = parser.Results.magnification;
  parameterMode = parser.Results.parameterMode;

  % Ensure the directory & file(s) exist
  if ~exist(directory, 'dir');
    errorString = ['Specified data directory ''' directory ''' does not exist!'];
    error(errorString);
  else
    testFile = utilities.GetFileName(directory, scanFileBase, 1);
    if ~exist(testFile, 'file')
      errorString = ['Specified scan data file ''' testFile ''' does not exist!'];
      error(errorString);
    end
    testVar = load(testFile, 'frequencies');
    numberOfFrequencies = length(testVar.frequencies);
    if ~any(strcmp(parser.UsingDefaults, 'anisotropicFileBase'))
      if isempty(anisotropicFileBase)
        warning('MATLAB:emptyArgument', 'No file name provided for the anisotropic analysis. Anisotropic analysis will not be performed. Consider removing the key and parameter value from the function call');
      elseif parameterMode == 3
        error('Cannot perform anisotropic analysis when fitting for the film parameters.\nRemove either the AnisotropicFileBase" option or change the value for the "ParameterMode" option to a suitable value.');
      else
        testFile = utilities.GetFileName(directory, anisotropicFileBase, 1);
        if ~exist(testFile, 'file')
          errorString = ['Specified scan data file ''' testFile ''' does not exist!'];
          error(errorString);
        end
        disp('Running anisotropic analysis with data for the second direction extracted from the file: ', testFile);
        runAnisotropicAnalysis = true;
      end
    end
  end

  % Get the initial properties
  substrateProperties = database.GetThermalProperties(substrate);
  filmProperties = database.GetThermalProperties(film);

  % Seed the initial values
  switch parameterMode
    case 1
      initialValues.ks = substrateProperties.k;
      initialValues.ds = substrateProperties.d;
    case 2
      initialValues.ks = substrateProperties.k;
      initialValues.ds = substrateProperties.d;
    case 3
      initialValues.kf = filmProperties.k;
      initialValues.df = filmProperties.d;
  end
  if runAnisotropicAnalysis == true
    initialValues.ks2D = initialValues.ks;
    initialValues.ds2D = initialValues.ds;
  end
  initialValues.spot = database.GetSpotSizeFromMagnification(magnification);
  if parameterMode == 1 || parameterMode == 3
    initialValues.rth = 1E-8;
  else
    % parameterMode == 2
    numberOfFrequencies = numberOfFrequencies - 1;
  end

  % Get the data
  data.x = LoadData(directory, scanFileBase, numberOfFrequencies);
  if runAnisotropicAnalysis
    data.y = LoadData(directory, anisotropicFileBase, numberOfFrequencies);
  end

  % Return the final values
  finalValues = initialValues;
end
