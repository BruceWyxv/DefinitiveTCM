function results = FitTCMData(dataFilePath, filmName, filmThickness, preferencesFile, varargin)
% Syntax:       results = FitTCMData(<inputs>)
%
% Description:  This script is adapted from the sequence of files used to
%               fit data generated by the TCM to extract thermal properties
%               of the sample material. The author of these original files
%               is Dave Hurley (david.hurley@inl.gov):
%                   parmerror2.m loaddata.m TWM.m
%
%               The purpose is to develop a computational method, using 2D
%               Fourier transforms, that will perform a minimization on the
%               data for an isotropic or anisotropic material.
%
%               The data are taken from a '.mat' file, generated by the
%               DefinitiveTCM package. This file contains a single
%               structure that stores all the data and experiment
%               parameters.
%
% Inputs:
%   * Indicates a key-value argument
%               1) Path to the data file
%               2) Name of film material, as it appears in Database.m
%               3) Film thickness, in m
%               * AnalysisModel         (default = 'Fast')
%                   Specifies which parameters should be minimized and
%                   included in the output:
%                       Fast = ks, ds, Re
%                       Film = kf, df, Re, Rth
%                       Full = ks, ds, Re, Rth
%                   Notes:
%                       1) 'Fast' will cap the maximum frequency at 50 kHz
%                       2) Only 'Full' will perform any anisotropic fits
%               * SubstrateName         (default = <Sample Name>, taken
%                                        from the information in the data
%                                        file)
%
% Outputs:      results
%               A structure containing the following fields, depending on
%               the input arguments and requested analysis modes:
%                 ks:     thermal conductivity of the substrate
%                 ds:     thermal diffusivity of the substrate
%                 rth:    thermal (Kapitza) resistance at the
%                         film-substrate interface
%                 spot:   convolved spotsize of the pump and probe lasers
%                 kf:     thermal conductivity of the film
%                 df:     thermal diffusivity of the film
%                 ks2D:   anisotropic thermal conductivity of the substrate
%                         in the second direction
%                 ds2D:   anisotropic thermal diffusivity of the substrate
%                         in the second direction
%
% File:         FitThermalAnisotropy.m Author:       Brycen Wendt
% (brycen.wendt@inl.gov; wendbryc@isu.edu) Date Created: 09/30/2015

  % Get the databases and utilities
  database = Database();

  % Define the input arguments
  parser = inputParser;
  parser.addRequired('dataFilePath', @(x) ischar(x) && exists(x, 'file'));
  parser.addRequired('filmName', @ischar);
  parser.addRequired('filmThickness', @isnumeric);
  parser.addRequired('preferencesFile', @(x) ischar(x) && exists(x, 'file'));
  parser.addParameter('analysisModel', 'Fast', @ischar);
  parser.addParameter('magnification', 50, @isnumeric);
  parser.addParameter('substrateName', '', @ischar);

  % Check the input arguments
  parser.KeepUnmatched = true;
  try
    parser.parse(dataFilePath, filmName, filmThickness, varargin{:});
  catch me
    error('Error when trying to parse input arguments:   %s', me.message);
  end
  if ~isempty(fieldnames(parser.Unmatched))
    warning('MATLAB:unknownArgument', 'Some arguments were not recognized:');
    disp(parser.Unmatched);
  end

  % Assign additional values
  analysisModel = parser.Results.analysisModel;
  substrateName = parser.Results.substrateName;

  % Ensure the file is valid
  [directory, fileName, ~] = fileparts(dataFilePath);
  % Validate the directory
  if ~exist(directory, 'dir');
    error('Specified data directory ''%s'' does not exist!', directory);
  end
  % Validate the file
  if ~exist(dataFilePath, 'file')
    error('Specified scan data file ''%s'' does not exist!', fileName);
  end
  
  % Load the data
  data = load(dataFilePath);
  preferences = ini2struct(preferencesFile);
  
  % Provide backwards-compatibility
  if ~isfield(data, 'anisotropic') || data.anisotropic == true
    data.anisotropic = false;
  end
  if ~isfield(data, 'magnification')
    data.magnification = preferences.Analysis.magnification;
  end

  % Get the initial properties
  filmProperties = database.GetThermalProperties(filmName);
  if isempty(substrateName)
    substrateName = fileName;
  end
  substrateFound = false;
  try
    % Try to get the substrate properties based on the provided name
    substrateProperties = database.GetThermalProperties(substrateName);
    substrateFound = true;
  catch
    % Nothing found so seed the properties with the values for pyrex, a
    % good middle-of-the-road material for the range of the TCm
    substrateProperties = database.GetThermalProperties('pyrex');
  end
  
  % Define the parameters. Not all will be required for each fitting
  % routine
  parameterInitialValues = zeros(1,8);
  parameterNames = cell(1,8);
  parameterInitialValues(1) = substrateProperties.k;
  parameterNames{1} = 'Substrate Conductivity';
  parameterInitialValues(2) = substrateProperties.d;
  parameterNames{2} = 'Substrate Diffusivity';
  parameterInitialValues(5) = filmProperties.k;
  parameterNames{5} = 'Film Conductivity';
  parameterInitialValues(6) = filmProperties.d;
  parameterNames{6} = 'Film Diffusivity';
  parameterInitialValues(7) = preferences.Analysis.kapitzaResistance;
  parameterNames{7} = 'Kapitza Resistance';
  parameterInitialValues(8) = database.GetSpotSizeFromMagnification(data.magnification);
  parameterNames{8} = 'Spot Size';
  fitParameters = false(1,8);
  fitParameters(8) = true; % We always fit the spot size
  
  % Select the requested fit, and identify which seed values will be fit
  switch lower(analysisModel)
    case 'fast'
      fitParameters(1) = true;
      fitParameters(2) = true;
      % Cull the data
      allowedFrequencies = data.frequencies < 50e3;
      data.frequencies = data.frequencues(allowedFrequencies);
      data.amplitudes = data.amplitudes(allowedFrequencies,:);
      data.phases = data.phases(allowedFrequencies,:);
      
    case 'film'
      if ~substrateFound
        error('The substrate material must be defined in the materials database in order to perform an analysis of the film material');
      end
      fitParameters(5) = true;
      fitParameters(6) = true;
      fitParameters(7) = true;
      
    case 'full'
      fitParameters(1) = true;
      fitParameters(2) = true;
      fitParameters(7) = true;

      % Determine if we are running an anisotropic fit
      if data.anisotropic
        fitParameters(3) = true;
        fitParameters(4) = true;
        % Add the directionality specifier to the names
        parameterNames{1} = strcat(parameterNames{1}, ' - 1');
        parameterNames{2} = strcat(parameterNames{2}, ' - 1');
        parameterNames{3} = 'Substrate Conductivity - 2';
        parameterInitialValues(3) = substrateProperties.k;
        parameterNames{4} = 'Substrate Diffusivity - 2';
        parameterInitialValues(4) = substrateProperties.d;
      end
      
    otherwise
      error('The analysis model ''%s'' does not exists.', analysisModel);
  end
  
  % Set up and run the analysis
  analyzer = ThermaWaveNumbers(data,...
                               fitParameters,...
                               preferences,...
                               parameterInitialValues, parameterNames);
  results = analyzer.Run();
end
